// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/novychok/authasvs/internal/config"
	"github.com/novychok/authasvs/internal/handler/authapiv1"
	"github.com/novychok/authasvs/internal/pkg/context"
	"github.com/novychok/authasvs/internal/pkg/jwts"
	"github.com/novychok/authasvs/internal/pkg/postgres"
	"github.com/novychok/authasvs/internal/pkg/slog"
	"github.com/novychok/authasvs/internal/pkg/validator"
	"github.com/novychok/authasvs/internal/repository/auth"
	auth2 "github.com/novychok/authasvs/internal/service/auth"
)

// Injectors from wire.go:

func Init() (*App, func(), error) {
	contextContext := context.New()
	logger := slog.New()
	configConfig, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	authapiv1Config := config.GetPlatfromAPIV1(configConfig)
	validatorASVS := validator.New()
	secretManager, err := jwts.New()
	if err != nil {
		return nil, nil, err
	}
	postgresConfig := config.GetPostgres(configConfig)
	connection, cleanup, err := postgres.New(postgresConfig)
	if err != nil {
		return nil, nil, err
	}
	repositoryAuth := auth.NewPostgres(connection)
	serviceAuth := auth2.New(logger, validatorASVS, secretManager, repositoryAuth)
	serverInterface := authapiv1.NewHandler(serviceAuth)
	server := authapiv1.NewServer(logger, authapiv1Config, serverInterface, serviceAuth)
	app, cleanup2, err := New(contextContext, logger, server)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
